*vital-data-string.txt*		string utilities library.

==============================================================================
CONTENTS				*Vital.Data.String-contents*

INTRODUCTION			|Vital.Data.String-introduction|
INTERFACE			|Vital.Data.String-interface|
  Functions			  |Vital.Data.String-functions|

==============================================================================
INTRODUCTION				*Vital.Data.String-introduction*

*Vital.Data.String* is String Utilities Library.
It provides some functions to manipulate |String|.

==============================================================================
INTERFACE				*Vital.Data.String-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Data.String-functions*

replace({str}, {from}, {to})		*Vital.Data.String.replace()*
	Return string replaced {from} to {to} from {str}.
>
	:echo s:string.replace("fooba.bazbar", "ba.", "zzz")
	foozzzbazbar
>
replace_once({str}, {from}, {to})	*Vital.Data.String.replace_once()*
	Return string replaced {from} to {to} from {str} at once.
>
	:echo s:string.replace("foobarbazbar", "bar", "zzz")
	foozzzbazzzz
	:echo s:string.replace_once("foobarbazbar", "bar", "zzz")
	foozzzbazbar
>
scan({str}, {pattern})			*Vital.Data.String.scan()*
	Return |List| which matched {pattern} } in {str}.

split_leftright({expr}, {pattern})	*Vital.Data.String.split_leftright()*
	Return |List| that contains two |String| split by {pattern}.
    e.g.: >
    echo Data.String.split_leftright('neocomplcache', 'neo\zs.....') == ['neo', 'cache']

split3({expr}, {pattern})	*Vital.Data.String.split3()*
	Like |Vital.Data.String.split_leftright()|,
    but this function returns [left, middle, right]
    not only [left, right].
    e.g.: >
    echo Data.String.split3('neocomplcache', 'neo\zs.....') == ['neo', 'compl', 'cache']

nsplit({expr}, {n}, [, {pattern} [, {keepempty}]])
					*Vital.Data.String.nsplit()*
	Behave like |split()|. Return list which is limited as {n}'th elements.

chop({str}) 				*Vital.Data.String.chop()*
	Remove last character from {str}

wrap({str})				*Vital.Data.String.wrap()*
	Return |String| wrapped to fit to |columns| width.

nr2byte({nr})				*Vital.Data.String.nr2byte()*
	Return utf-8 bytes which has the number value {nr}.

nr2enc_char({charcode})			*Vital.Data.String.nr2enc_char()*
	Return string which has the number value {nr}. This function depend on
	|encoding| option.

nr2hex({nr})				*Vital.Data.String.nr2hex()*
	Return hex string which has the number value {nr}.

strchars({str})				*Vital.Data.String.strchars()*
	Returns the number of character in {str}.  Not bytes.

wcswidth({str})				*Vital.Data.String.wcswidth()*
	TODO:

chop({str})				*Vital.Data.String.chop()*
	Removes the last character from {str}.

wrap({str})				*Vital.Data.String.wrap()*
	TODO:

diffidx({a}, {b})			*Vital.Data.String.diffidx()*

truncate({str}, {width})		*Vital.Data.String.truncate()*
	TODO:

					*Vital.Data.String.truncate_smart()*
truncate_smart({str}, {max}, {footerwidth}, {separator})
	TODO:

strwidthpart({str}, {width})		*Vital.Data.String.strwidthpart()*
	TODO:

				*Vital.Data.String.strwidthpart_reverse()*
strwidthpart_reverse({str}, {width})
	TODO:


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
